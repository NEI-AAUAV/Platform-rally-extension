// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AddCheckpointApiRallyV1TeamIdCheckpointPutData, AddCheckpointApiRallyV1TeamIdCheckpointPutErrors, AddCheckpointApiRallyV1TeamIdCheckpointPutResponses, AddTeamMemberApiRallyV1TeamTeamIdMembersPostData, AddTeamMemberApiRallyV1TeamTeamIdMembersPostErrors, AddTeamMemberApiRallyV1TeamTeamIdMembersPostResponses, ApplyExtraShotsApiRallyV1ActivitiesResultsResultIdExtraShotsPostData, ApplyExtraShotsApiRallyV1ActivitiesResultsResultIdExtraShotsPostErrors, ApplyExtraShotsApiRallyV1ActivitiesResultsResultIdExtraShotsPostResponses, ApplyPenaltyApiRallyV1ActivitiesResultsResultIdPenaltyPostData, ApplyPenaltyApiRallyV1ActivitiesResultsResultIdPenaltyPostErrors, ApplyPenaltyApiRallyV1ActivitiesResultsResultIdPenaltyPostResponses, CreateActivityApiRallyV1ActivitiesPostData, CreateActivityApiRallyV1ActivitiesPostErrors, CreateActivityApiRallyV1ActivitiesPostResponses, CreateActivityResultApiRallyV1ActivitiesResultsPostData, CreateActivityResultApiRallyV1ActivitiesResultsPostErrors, CreateActivityResultApiRallyV1ActivitiesResultsPostResponses, CreateCheckpointApiRallyV1CheckpointPostData, CreateCheckpointApiRallyV1CheckpointPostErrors, CreateCheckpointApiRallyV1CheckpointPostResponses, CreateTeamApiRallyV1TeamPostData, CreateTeamApiRallyV1TeamPostErrors, CreateTeamApiRallyV1TeamPostResponses, CreateTeamVsResultApiRallyV1ActivitiesTeamVsActivityIdPostData, CreateTeamVsResultApiRallyV1ActivitiesTeamVsActivityIdPostErrors, CreateTeamVsResultApiRallyV1ActivitiesTeamVsActivityIdPostResponses, CreateVersusPairApiRallyV1VersusPairPostData, CreateVersusPairApiRallyV1VersusPairPostErrors, CreateVersusPairApiRallyV1VersusPairPostResponses, DeleteActivityApiRallyV1ActivitiesActivityIdDeleteData, DeleteActivityApiRallyV1ActivitiesActivityIdDeleteErrors, DeleteActivityApiRallyV1ActivitiesActivityIdDeleteResponses, DeleteCheckpointApiRallyV1CheckpointIdDeleteData, DeleteCheckpointApiRallyV1CheckpointIdDeleteErrors, DeleteCheckpointApiRallyV1CheckpointIdDeleteResponses, DeleteTeamApiRallyV1TeamIdDeleteData, DeleteTeamApiRallyV1TeamIdDeleteErrors, DeleteTeamApiRallyV1TeamIdDeleteResponses, EvaluateTeamActivityApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluatePostData, EvaluateTeamActivityApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluatePostErrors, EvaluateTeamActivityApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluatePostResponses, GetActivitiesApiRallyV1ActivitiesGetData, GetActivitiesApiRallyV1ActivitiesGetErrors, GetActivitiesApiRallyV1ActivitiesGetResponses, GetActivityApiRallyV1ActivitiesActivityIdGetData, GetActivityApiRallyV1ActivitiesActivityIdGetErrors, GetActivityApiRallyV1ActivitiesActivityIdGetResponses, GetActivityRankingApiRallyV1ActivitiesActivityIdRankingGetData, GetActivityRankingApiRallyV1ActivitiesActivityIdRankingGetErrors, GetActivityRankingApiRallyV1ActivitiesActivityIdRankingGetResponses, GetActivityResultApiRallyV1ActivitiesResultsResultIdGetData, GetActivityResultApiRallyV1ActivitiesResultsResultIdGetErrors, GetActivityResultApiRallyV1ActivitiesResultsResultIdGetResponses, GetActivityStatisticsApiRallyV1ActivitiesActivityIdStatisticsGetData, GetActivityStatisticsApiRallyV1ActivitiesActivityIdStatisticsGetErrors, GetActivityStatisticsApiRallyV1ActivitiesActivityIdStatisticsGetResponses, GetAllActivityResultsApiRallyV1ActivitiesResultsGetData, GetAllActivityResultsApiRallyV1ActivitiesResultsGetResponses, GetAllEvaluationsApiRallyV1StaffAllEvaluationsGetData, GetAllEvaluationsApiRallyV1StaffAllEvaluationsGetErrors, GetAllEvaluationsApiRallyV1StaffAllEvaluationsGetResponses, GetCheckpointsApiRallyV1CheckpointGetData, GetCheckpointsApiRallyV1CheckpointGetResponses, GetCheckpointTeamsApiRallyV1CheckpointTeamsGetData, GetCheckpointTeamsApiRallyV1CheckpointTeamsGetErrors, GetCheckpointTeamsApiRallyV1CheckpointTeamsGetResponses, GetGlobalRankingApiRallyV1ActivitiesRankingGlobalGetData, GetGlobalRankingApiRallyV1ActivitiesRankingGlobalGetResponses, GetMeApiRallyV1UserMeGetData, GetMeApiRallyV1UserMeGetResponses, GetMyCheckpointApiRallyV1StaffMyCheckpointGetData, GetMyCheckpointApiRallyV1StaffMyCheckpointGetErrors, GetMyCheckpointApiRallyV1StaffMyCheckpointGetResponses, GetNextCheckpointApiRallyV1CheckpointMeGetData, GetNextCheckpointApiRallyV1CheckpointMeGetResponses, GetOwnTeamApiRallyV1TeamMeGetData, GetOwnTeamApiRallyV1TeamMeGetResponses, GetRallyDurationApiRallyV1RallyDurationGetData, GetRallyDurationApiRallyV1RallyDurationGetResponses, GetStaffAssignmentsApiRallyV1UserStaffAssignmentsGetData, GetStaffAssignmentsApiRallyV1UserStaffAssignmentsGetResponses, GetTeamActivitiesForEvaluationApiRallyV1StaffTeamsTeamIdActivitiesGetData, GetTeamActivitiesForEvaluationApiRallyV1StaffTeamsTeamIdActivitiesGetErrors, GetTeamActivitiesForEvaluationApiRallyV1StaffTeamsTeamIdActivitiesGetResponses, GetTeamByIdApiRallyV1TeamIdGetData, GetTeamByIdApiRallyV1TeamIdGetErrors, GetTeamByIdApiRallyV1TeamIdGetResponses, GetTeamMembersApiRallyV1TeamTeamIdMembersGetData, GetTeamMembersApiRallyV1TeamTeamIdMembersGetErrors, GetTeamMembersApiRallyV1TeamTeamIdMembersGetResponses, GetTeamOpponentApiRallyV1VersusTeamTeamIdOpponentGetData, GetTeamOpponentApiRallyV1VersusTeamTeamIdOpponentGetErrors, GetTeamOpponentApiRallyV1VersusTeamTeamIdOpponentGetResponses, GetTeamRallyDurationApiRallyV1RallyTeamDurationTeamIdGetData, GetTeamRallyDurationApiRallyV1RallyTeamDurationTeamIdGetErrors, GetTeamRallyDurationApiRallyV1RallyTeamDurationTeamIdGetResponses, GetTeamsApiRallyV1TeamGetData, GetTeamsApiRallyV1TeamGetResponses, GetTeamsAtMyCheckpointApiRallyV1StaffTeamsGetData, GetTeamsAtMyCheckpointApiRallyV1StaffTeamsGetErrors, GetTeamsAtMyCheckpointApiRallyV1StaffTeamsGetResponses, ListVersusGroupsApiRallyV1VersusGroupsGetData, ListVersusGroupsApiRallyV1VersusGroupsGetResponses, RemoveTeamMemberApiRallyV1TeamTeamIdMembersUserIdDeleteData, RemoveTeamMemberApiRallyV1TeamTeamIdMembersUserIdDeleteErrors, RemoveTeamMemberApiRallyV1TeamTeamIdMembersUserIdDeleteResponses, ReorderCheckpointsApiRallyV1CheckpointReorderPutData, ReorderCheckpointsApiRallyV1CheckpointReorderPutErrors, ReorderCheckpointsApiRallyV1CheckpointReorderPutResponses, UpdateActivityApiRallyV1ActivitiesActivityIdPutData, UpdateActivityApiRallyV1ActivitiesActivityIdPutErrors, UpdateActivityApiRallyV1ActivitiesActivityIdPutResponses, UpdateActivityResultApiRallyV1ActivitiesResultsResultIdPutData, UpdateActivityResultApiRallyV1ActivitiesResultsResultIdPutErrors, UpdateActivityResultApiRallyV1ActivitiesResultsResultIdPutResponses, UpdateCheckpointApiRallyV1CheckpointIdPutData, UpdateCheckpointApiRallyV1CheckpointIdPutErrors, UpdateCheckpointApiRallyV1CheckpointIdPutResponses, UpdateCheckpointAssignmentApiRallyV1UserUserIdCheckpointAssignmentPutData, UpdateCheckpointAssignmentApiRallyV1UserUserIdCheckpointAssignmentPutErrors, UpdateCheckpointAssignmentApiRallyV1UserUserIdCheckpointAssignmentPutResponses, UpdateRallySettingsApiRallyV1RallySettingsPutData, UpdateRallySettingsApiRallyV1RallySettingsPutErrors, UpdateRallySettingsApiRallyV1RallySettingsPutResponses, UpdateTeamActivityEvaluationApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluateResultIdPutData, UpdateTeamActivityEvaluationApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluateResultIdPutErrors, UpdateTeamActivityEvaluationApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluateResultIdPutResponses, UpdateTeamApiRallyV1TeamIdPutData, UpdateTeamApiRallyV1TeamIdPutErrors, UpdateTeamApiRallyV1TeamIdPutResponses, UpdateTeamMemberApiRallyV1TeamTeamIdMembersUserIdPutData, UpdateTeamMemberApiRallyV1TeamTeamIdMembersUserIdPutErrors, UpdateTeamMemberApiRallyV1TeamTeamIdMembersUserIdPutResponses, ViewRallySettingsApiRallyV1RallySettingsGetData, ViewRallySettingsApiRallyV1RallySettingsGetResponses, ViewRallySettingsPublicApiRallyV1RallySettingsPublicGetData, ViewRallySettingsPublicApiRallyV1RallySettingsPublicGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Teams
 */
export const getTeamsApiRallyV1TeamGet = <ThrowOnError extends boolean = false>(options?: Options<GetTeamsApiRallyV1TeamGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTeamsApiRallyV1TeamGetResponses, unknown, ThrowOnError>({
        url: '/api/rally/v1/team/',
        ...options
    });
};

/**
 * Create Team
 */
export const createTeamApiRallyV1TeamPost = <ThrowOnError extends boolean = false>(options: Options<CreateTeamApiRallyV1TeamPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTeamApiRallyV1TeamPostResponses, CreateTeamApiRallyV1TeamPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Own Team
 */
export const getOwnTeamApiRallyV1TeamMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetOwnTeamApiRallyV1TeamMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOwnTeamApiRallyV1TeamMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/me',
        ...options
    });
};

/**
 * Delete Team
 *
 * Delete a team. Only admins can delete teams.
 */
export const deleteTeamApiRallyV1TeamIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTeamApiRallyV1TeamIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTeamApiRallyV1TeamIdDeleteResponses, DeleteTeamApiRallyV1TeamIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/{id}',
        ...options
    });
};

/**
 * Get Team By Id
 */
export const getTeamByIdApiRallyV1TeamIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTeamByIdApiRallyV1TeamIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTeamByIdApiRallyV1TeamIdGetResponses, GetTeamByIdApiRallyV1TeamIdGetErrors, ThrowOnError>({
        url: '/api/rally/v1/team/{id}',
        ...options
    });
};

/**
 * Update Team
 */
export const updateTeamApiRallyV1TeamIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamApiRallyV1TeamIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTeamApiRallyV1TeamIdPutResponses, UpdateTeamApiRallyV1TeamIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Checkpoint
 */
export const addCheckpointApiRallyV1TeamIdCheckpointPut = <ThrowOnError extends boolean = false>(options: Options<AddCheckpointApiRallyV1TeamIdCheckpointPutData, ThrowOnError>) => {
    return (options.client ?? client).put<AddCheckpointApiRallyV1TeamIdCheckpointPutResponses, AddCheckpointApiRallyV1TeamIdCheckpointPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/{id}/checkpoint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Checkpoints
 */
export const getCheckpointsApiRallyV1CheckpointGet = <ThrowOnError extends boolean = false>(options?: Options<GetCheckpointsApiRallyV1CheckpointGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCheckpointsApiRallyV1CheckpointGetResponses, unknown, ThrowOnError>({
        url: '/api/rally/v1/checkpoint/',
        ...options
    });
};

/**
 * Create Checkpoint
 */
export const createCheckpointApiRallyV1CheckpointPost = <ThrowOnError extends boolean = false>(options: Options<CreateCheckpointApiRallyV1CheckpointPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCheckpointApiRallyV1CheckpointPostResponses, CreateCheckpointApiRallyV1CheckpointPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/checkpoint/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Next Checkpoint
 *
 * Return the next checkpoint a team must head to.
 */
export const getNextCheckpointApiRallyV1CheckpointMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetNextCheckpointApiRallyV1CheckpointMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNextCheckpointApiRallyV1CheckpointMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/checkpoint/me',
        ...options
    });
};

/**
 * Get Checkpoint Teams
 *
 * If a staff is authenticated, returned all teams that just passed
 * through a staff's checkpoint.
 * If an admin is authenticated, returned all teams.
 */
export const getCheckpointTeamsApiRallyV1CheckpointTeamsGet = <ThrowOnError extends boolean = false>(options?: Options<GetCheckpointTeamsApiRallyV1CheckpointTeamsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCheckpointTeamsApiRallyV1CheckpointTeamsGetResponses, GetCheckpointTeamsApiRallyV1CheckpointTeamsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/checkpoint/teams',
        ...options
    });
};

/**
 * Reorder Checkpoints
 *
 * Reorder checkpoints by updating their order values.
 */
export const reorderCheckpointsApiRallyV1CheckpointReorderPut = <ThrowOnError extends boolean = false>(options: Options<ReorderCheckpointsApiRallyV1CheckpointReorderPutData, ThrowOnError>) => {
    return (options.client ?? client).put<ReorderCheckpointsApiRallyV1CheckpointReorderPutResponses, ReorderCheckpointsApiRallyV1CheckpointReorderPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/checkpoint/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Checkpoint
 *
 * Delete a checkpoint. Only admins can delete checkpoints.
 */
export const deleteCheckpointApiRallyV1CheckpointIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCheckpointApiRallyV1CheckpointIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCheckpointApiRallyV1CheckpointIdDeleteResponses, DeleteCheckpointApiRallyV1CheckpointIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/checkpoint/{id}',
        ...options
    });
};

/**
 * Update Checkpoint
 */
export const updateCheckpointApiRallyV1CheckpointIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCheckpointApiRallyV1CheckpointIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateCheckpointApiRallyV1CheckpointIdPutResponses, UpdateCheckpointApiRallyV1CheckpointIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/checkpoint/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Staff Assignments
 *
 * Get all users with rally-staff role from NEI platform and their checkpoint assignments.
 * This shows all rally-staff users from the main NEI platform and their current checkpoint assignments.
 */
export const getStaffAssignmentsApiRallyV1UserStaffAssignmentsGet = <ThrowOnError extends boolean = false>(options?: Options<GetStaffAssignmentsApiRallyV1UserStaffAssignmentsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStaffAssignmentsApiRallyV1UserStaffAssignmentsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/user/staff-assignments',
        ...options
    });
};

/**
 * Get Me
 *
 * Get current user information.
 * Returns the authenticated user from the NEI platform.
 */
export const getMeApiRallyV1UserMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetMeApiRallyV1UserMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMeApiRallyV1UserMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/user/me',
        ...options
    });
};

/**
 * Update Checkpoint Assignment
 *
 * Update a user's checkpoint assignment.
 * This creates/updates Rally-specific staff assignments.
 */
export const updateCheckpointAssignmentApiRallyV1UserUserIdCheckpointAssignmentPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCheckpointAssignmentApiRallyV1UserUserIdCheckpointAssignmentPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateCheckpointAssignmentApiRallyV1UserUserIdCheckpointAssignmentPutResponses, UpdateCheckpointAssignmentApiRallyV1UserUserIdCheckpointAssignmentPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/user/{user_id}/checkpoint-assignment',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * View Rally Settings
 *
 * View rally settings
 */
export const viewRallySettingsApiRallyV1RallySettingsGet = <ThrowOnError extends boolean = false>(options?: Options<ViewRallySettingsApiRallyV1RallySettingsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewRallySettingsApiRallyV1RallySettingsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/rally/settings',
        ...options
    });
};

/**
 * Update Rally Settings
 *
 * Update global rally configuration (admin only).
 * Args:
 * settings_in: New settings values
 *
 * Returns:
 * Updated rally settings
 *
 * Raises:
 * 403: If user is not authorized
 * 400: If validation fails
 */
export const updateRallySettingsApiRallyV1RallySettingsPut = <ThrowOnError extends boolean = false>(options: Options<UpdateRallySettingsApiRallyV1RallySettingsPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateRallySettingsApiRallyV1RallySettingsPutResponses, UpdateRallySettingsApiRallyV1RallySettingsPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/rally/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * View Rally Settings Public
 *
 * View rally settings (public access - no authentication required)
 */
export const viewRallySettingsPublicApiRallyV1RallySettingsPublicGet = <ThrowOnError extends boolean = false>(options?: Options<ViewRallySettingsPublicApiRallyV1RallySettingsPublicGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewRallySettingsPublicApiRallyV1RallySettingsPublicGetResponses, unknown, ThrowOnError>({
        url: '/api/rally/v1/rally/settings/public',
        ...options
    });
};

/**
 * Create Versus Pair
 *
 * Create versus pair
 */
export const createVersusPairApiRallyV1VersusPairPost = <ThrowOnError extends boolean = false>(options: Options<CreateVersusPairApiRallyV1VersusPairPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateVersusPairApiRallyV1VersusPairPostResponses, CreateVersusPairApiRallyV1VersusPairPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/versus/pair',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Team Opponent
 *
 * Get a team's opponent
 */
export const getTeamOpponentApiRallyV1VersusTeamTeamIdOpponentGet = <ThrowOnError extends boolean = false>(options: Options<GetTeamOpponentApiRallyV1VersusTeamTeamIdOpponentGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTeamOpponentApiRallyV1VersusTeamTeamIdOpponentGetResponses, GetTeamOpponentApiRallyV1VersusTeamTeamIdOpponentGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/versus/team/{team_id}/opponent',
        ...options
    });
};

/**
 * List Versus Groups
 *
 * Get all versus groups
 */
export const listVersusGroupsApiRallyV1VersusGroupsGet = <ThrowOnError extends boolean = false>(options?: Options<ListVersusGroupsApiRallyV1VersusGroupsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListVersusGroupsApiRallyV1VersusGroupsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/versus/groups',
        ...options
    });
};

/**
 * Get Team Members
 *
 * Get all members of a team.
 */
export const getTeamMembersApiRallyV1TeamTeamIdMembersGet = <ThrowOnError extends boolean = false>(options: Options<GetTeamMembersApiRallyV1TeamTeamIdMembersGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTeamMembersApiRallyV1TeamTeamIdMembersGetResponses, GetTeamMembersApiRallyV1TeamTeamIdMembersGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/{team_id}/members',
        ...options
    });
};

/**
 * Add Team Member
 *
 * Add a member to a team.
 */
export const addTeamMemberApiRallyV1TeamTeamIdMembersPost = <ThrowOnError extends boolean = false>(options: Options<AddTeamMemberApiRallyV1TeamTeamIdMembersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AddTeamMemberApiRallyV1TeamTeamIdMembersPostResponses, AddTeamMemberApiRallyV1TeamTeamIdMembersPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/{team_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Team Member
 *
 * Remove a member from a team.
 */
export const removeTeamMemberApiRallyV1TeamTeamIdMembersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveTeamMemberApiRallyV1TeamTeamIdMembersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveTeamMemberApiRallyV1TeamTeamIdMembersUserIdDeleteResponses, RemoveTeamMemberApiRallyV1TeamTeamIdMembersUserIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/{team_id}/members/{user_id}',
        ...options
    });
};

/**
 * Update Team Member
 *
 * Update a team member's information.
 */
export const updateTeamMemberApiRallyV1TeamTeamIdMembersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamMemberApiRallyV1TeamTeamIdMembersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTeamMemberApiRallyV1TeamTeamIdMembersUserIdPutResponses, UpdateTeamMemberApiRallyV1TeamTeamIdMembersUserIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/team/{team_id}/members/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Activities
 *
 * Get activities list
 */
export const getActivitiesApiRallyV1ActivitiesGet = <ThrowOnError extends boolean = false>(options?: Options<GetActivitiesApiRallyV1ActivitiesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetActivitiesApiRallyV1ActivitiesGetResponses, GetActivitiesApiRallyV1ActivitiesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/',
        ...options
    });
};

/**
 * Create Activity
 *
 * Create a new activity
 */
export const createActivityApiRallyV1ActivitiesPost = <ThrowOnError extends boolean = false>(options: Options<CreateActivityApiRallyV1ActivitiesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateActivityApiRallyV1ActivitiesPostResponses, CreateActivityApiRallyV1ActivitiesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Activity Results
 *
 * Get all activity results (evaluations) with team and activity details
 */
export const getAllActivityResultsApiRallyV1ActivitiesResultsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllActivityResultsApiRallyV1ActivitiesResultsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllActivityResultsApiRallyV1ActivitiesResultsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/results',
        ...options
    });
};

/**
 * Delete Activity
 *
 * Delete an activity
 */
export const deleteActivityApiRallyV1ActivitiesActivityIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteActivityApiRallyV1ActivitiesActivityIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteActivityApiRallyV1ActivitiesActivityIdDeleteResponses, DeleteActivityApiRallyV1ActivitiesActivityIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/{activity_id}',
        ...options
    });
};

/**
 * Get Activity
 *
 * Get activity by ID
 */
export const getActivityApiRallyV1ActivitiesActivityIdGet = <ThrowOnError extends boolean = false>(options: Options<GetActivityApiRallyV1ActivitiesActivityIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetActivityApiRallyV1ActivitiesActivityIdGetResponses, GetActivityApiRallyV1ActivitiesActivityIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/{activity_id}',
        ...options
    });
};

/**
 * Update Activity
 *
 * Update an activity
 */
export const updateActivityApiRallyV1ActivitiesActivityIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateActivityApiRallyV1ActivitiesActivityIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateActivityApiRallyV1ActivitiesActivityIdPutResponses, UpdateActivityApiRallyV1ActivitiesActivityIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/{activity_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Activity Result
 *
 * Create a new activity result
 */
export const createActivityResultApiRallyV1ActivitiesResultsPost = <ThrowOnError extends boolean = false>(options: Options<CreateActivityResultApiRallyV1ActivitiesResultsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateActivityResultApiRallyV1ActivitiesResultsPostResponses, CreateActivityResultApiRallyV1ActivitiesResultsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/results/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Activity Result
 *
 * Get activity result by ID
 */
export const getActivityResultApiRallyV1ActivitiesResultsResultIdGet = <ThrowOnError extends boolean = false>(options: Options<GetActivityResultApiRallyV1ActivitiesResultsResultIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetActivityResultApiRallyV1ActivitiesResultsResultIdGetResponses, GetActivityResultApiRallyV1ActivitiesResultsResultIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/results/{result_id}',
        ...options
    });
};

/**
 * Update Activity Result
 *
 * Update an activity result
 */
export const updateActivityResultApiRallyV1ActivitiesResultsResultIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateActivityResultApiRallyV1ActivitiesResultsResultIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateActivityResultApiRallyV1ActivitiesResultsResultIdPutResponses, UpdateActivityResultApiRallyV1ActivitiesResultsResultIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/results/{result_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Apply Extra Shots
 *
 * Apply extra shots bonus to activity result
 */
export const applyExtraShotsApiRallyV1ActivitiesResultsResultIdExtraShotsPost = <ThrowOnError extends boolean = false>(options: Options<ApplyExtraShotsApiRallyV1ActivitiesResultsResultIdExtraShotsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ApplyExtraShotsApiRallyV1ActivitiesResultsResultIdExtraShotsPostResponses, ApplyExtraShotsApiRallyV1ActivitiesResultsResultIdExtraShotsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/results/{result_id}/extra-shots',
        ...options
    });
};

/**
 * Apply Penalty
 *
 * Apply penalty to activity result
 */
export const applyPenaltyApiRallyV1ActivitiesResultsResultIdPenaltyPost = <ThrowOnError extends boolean = false>(options: Options<ApplyPenaltyApiRallyV1ActivitiesResultsResultIdPenaltyPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ApplyPenaltyApiRallyV1ActivitiesResultsResultIdPenaltyPostResponses, ApplyPenaltyApiRallyV1ActivitiesResultsResultIdPenaltyPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/results/{result_id}/penalty',
        ...options
    });
};

/**
 * Get Activity Ranking
 *
 * Get ranking for a specific activity
 */
export const getActivityRankingApiRallyV1ActivitiesActivityIdRankingGet = <ThrowOnError extends boolean = false>(options: Options<GetActivityRankingApiRallyV1ActivitiesActivityIdRankingGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetActivityRankingApiRallyV1ActivitiesActivityIdRankingGetResponses, GetActivityRankingApiRallyV1ActivitiesActivityIdRankingGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/{activity_id}/ranking',
        ...options
    });
};

/**
 * Get Global Ranking
 *
 * Get global team ranking
 */
export const getGlobalRankingApiRallyV1ActivitiesRankingGlobalGet = <ThrowOnError extends boolean = false>(options?: Options<GetGlobalRankingApiRallyV1ActivitiesRankingGlobalGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGlobalRankingApiRallyV1ActivitiesRankingGlobalGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/ranking/global',
        ...options
    });
};

/**
 * Create Team Vs Result
 *
 * Create team vs team activity results
 */
export const createTeamVsResultApiRallyV1ActivitiesTeamVsActivityIdPost = <ThrowOnError extends boolean = false>(options: Options<CreateTeamVsResultApiRallyV1ActivitiesTeamVsActivityIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTeamVsResultApiRallyV1ActivitiesTeamVsActivityIdPostResponses, CreateTeamVsResultApiRallyV1ActivitiesTeamVsActivityIdPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/team-vs/{activity_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Activity Statistics
 *
 * Get statistics for a specific activity
 */
export const getActivityStatisticsApiRallyV1ActivitiesActivityIdStatisticsGet = <ThrowOnError extends boolean = false>(options: Options<GetActivityStatisticsApiRallyV1ActivitiesActivityIdStatisticsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetActivityStatisticsApiRallyV1ActivitiesActivityIdStatisticsGetResponses, GetActivityStatisticsApiRallyV1ActivitiesActivityIdStatisticsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/activities/{activity_id}/statistics',
        ...options
    });
};

/**
 * Get My Checkpoint
 *
 * Get the checkpoint assigned to the current staff member
 */
export const getMyCheckpointApiRallyV1StaffMyCheckpointGet = <ThrowOnError extends boolean = false>(options?: Options<GetMyCheckpointApiRallyV1StaffMyCheckpointGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMyCheckpointApiRallyV1StaffMyCheckpointGetResponses, GetMyCheckpointApiRallyV1StaffMyCheckpointGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/staff/my-checkpoint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Teams At My Checkpoint
 *
 * Get all teams at the staff member's assigned checkpoint
 */
export const getTeamsAtMyCheckpointApiRallyV1StaffTeamsGet = <ThrowOnError extends boolean = false>(options?: Options<GetTeamsAtMyCheckpointApiRallyV1StaffTeamsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTeamsAtMyCheckpointApiRallyV1StaffTeamsGetResponses, GetTeamsAtMyCheckpointApiRallyV1StaffTeamsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/staff/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Team Activities For Evaluation
 *
 * Get activities for a specific team that can be evaluated by this staff member
 */
export const getTeamActivitiesForEvaluationApiRallyV1StaffTeamsTeamIdActivitiesGet = <ThrowOnError extends boolean = false>(options: Options<GetTeamActivitiesForEvaluationApiRallyV1StaffTeamsTeamIdActivitiesGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTeamActivitiesForEvaluationApiRallyV1StaffTeamsTeamIdActivitiesGetResponses, GetTeamActivitiesForEvaluationApiRallyV1StaffTeamsTeamIdActivitiesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/staff/teams/{team_id}/activities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Evaluate Team Activity
 *
 * Evaluate a team's performance in an activity
 */
export const evaluateTeamActivityApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluatePost = <ThrowOnError extends boolean = false>(options: Options<EvaluateTeamActivityApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<EvaluateTeamActivityApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluatePostResponses, EvaluateTeamActivityApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/staff/teams/{team_id}/activities/{activity_id}/evaluate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Team Activity Evaluation
 *
 * Update a team's activity evaluation
 */
export const updateTeamActivityEvaluationApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluateResultIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamActivityEvaluationApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluateResultIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTeamActivityEvaluationApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluateResultIdPutResponses, UpdateTeamActivityEvaluationApiRallyV1StaffTeamsTeamIdActivitiesActivityIdEvaluateResultIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/staff/teams/{team_id}/activities/{activity_id}/evaluate/{result_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Evaluations
 *
 * Get all evaluations - accessible by managers only
 */
export const getAllEvaluationsApiRallyV1StaffAllEvaluationsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllEvaluationsApiRallyV1StaffAllEvaluationsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllEvaluationsApiRallyV1StaffAllEvaluationsGetResponses, GetAllEvaluationsApiRallyV1StaffAllEvaluationsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/staff/all-evaluations',
        ...options
    });
};

/**
 * Get Rally Duration
 *
 * Get rally duration and timing information.
 *
 * Returns:
 * Rally timing status including current time, start/end times,
 * time remaining/elapsed, and progress percentage.
 */
export const getRallyDurationApiRallyV1RallyDurationGet = <ThrowOnError extends boolean = false>(options?: Options<GetRallyDurationApiRallyV1RallyDurationGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRallyDurationApiRallyV1RallyDurationGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/rally/duration',
        ...options
    });
};

/**
 * Get Team Rally Duration
 *
 * Get rally duration information for a specific team.
 *
 * Args:
 * team_id: ID of the team to get duration info for
 *
 * Returns:
 * Team-specific rally duration information.
 */
export const getTeamRallyDurationApiRallyV1RallyTeamDurationTeamIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTeamRallyDurationApiRallyV1RallyTeamDurationTeamIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTeamRallyDurationApiRallyV1RallyTeamDurationTeamIdGetResponses, GetTeamRallyDurationApiRallyV1RallyTeamDurationTeamIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rally/v1/rally/team-duration/{team_id}',
        ...options
    });
};
