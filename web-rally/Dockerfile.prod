FROM python:3.11-slim AS api-schema-stage
WORKDIR /app
# If api-rally sources are available in the build context, generate openapi.json
ARG HAS_API_RALLY=0
ARG API_RALLY_DIR="api-rally"
RUN if [ "$HAS_API_RALLY" = "1" ]; then \
      echo "api-rally sources detected; installing Poetry and FastAPI deps" && \
      apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/* && \
      pip install poetry && \
      true; \
    else \
      echo "api-rally sources not provided; skipping schema stage setup"; \
    fi
COPY ${API_RALLY_DIR}/pyproject.toml ${API_RALLY_DIR}/poetry.lock* ./ 2>/dev/null || true
RUN if [ -f pyproject.toml ]; then \
      poetry config virtualenvs.create false && \
      poetry install --no-interaction --no-root --only main && \
      poetry add fastapi || true; \
    fi
COPY ${API_RALLY_DIR}/app ./app 2>/dev/null || true
RUN if [ -d app ]; then \
      python - << 'PY' 
from app.main import app
from fastapi.openapi.utils import get_openapi
import json
schema = get_openapi(title=getattr(app, 'title', 'API'), version=getattr(app, 'version', '0.0.0'), routes=app.routes)
json.dump(schema, open('/app/openapi.json', 'w'))
PY
    else \
      echo "No api-rally app directory; skipping schema generation"; \
    fi

FROM node:18-alpine AS build-stage
ENV PNPM_HOME="/pnpm" \
    PATH="$PNPM_HOME:$PATH"

RUN npm install -g pnpm

WORKDIR /web_rally

COPY package.json pnpm-lock.yaml ./

RUN pnpm install --frozen-lockfile

COPY . .
# If client is missing, optionally fetch schema and generate
ARG OPENAPI_URL=""
ARG HAS_API_RALLY=0
RUN if [ ! -f ./src/client/index.ts ]; then \
      echo "Generated client not found. Preparing to generate..."; \
      if [ ! -f ./openapi.json ]; then \
        if [ -n "$OPENAPI_URL" ]; then \
          echo "Fetching OpenAPI schema from $OPENAPI_URL" && \
          apk add --no-cache curl && \
          curl -fsSL "$OPENAPI_URL" -o ./openapi.json; \
        elif [ "$HAS_API_RALLY" = "1" ]; then \
          echo "Using schema generated from api-rally sources" && \
          cp /app/openapi.json ./openapi.json; \
        else \
          echo "ERROR: openapi.json not found and OPENAPI_URL not set" && exit 1; \
        fi; \
      fi; \
      pnpm run generate-client; \
    else \
      echo "Using pre-generated client in src/client"; \
    fi && \
    GENERATE_SOURCEMAP=false pnpm build

FROM nginx:1.20-alpine AS runtime

COPY ./nginx/default.conf /etc/nginx/conf.d/default.conf

COPY --from=build-stage /web_rally/dist /usr/share/nginx/html/rally

EXPOSE 3003
