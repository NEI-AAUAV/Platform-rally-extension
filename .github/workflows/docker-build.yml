name: Docker Build Validation

on:
  push:
    branches: [ main ]
    paths:
      - 'api-rally/Dockerfile*'
      - 'web-rally/Dockerfile*'
      - 'api-rally/pyproject.toml'
      - 'api-rally/poetry.lock'
      - 'web-rally/package.json'
      - 'web-rally/pnpm-lock.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api-rally/Dockerfile*'
      - 'web-rally/Dockerfile*'
  workflow_dispatch:

jobs:
  build-api-docker:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build API development image
        uses: docker/build-push-action@v5
        with:
          context: ./api-rally
          file: ./api-rally/Dockerfile
          push: false
          tags: rally-api:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build API production image
        uses: docker/build-push-action@v5
        with:
          context: ./api-rally
          file: ./api-rally/Dockerfile.prod
          push: false
          tags: rally-api:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test API container starts
        run: |
          docker run --rm -d --name rally-api-test \
            -e POSTGRES_SERVER=localhost \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_DB=test \
            rally-api:dev
          
          sleep 5
          
          if docker ps | grep -q rally-api-test; then
            echo "✅ API container started successfully"
            docker stop rally-api-test
          else
            echo "❌ API container failed to start"
            docker logs rally-api-test || true
            exit 1
          fi

  build-web-docker:
    name: Build Web Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build web development image
        uses: docker/build-push-action@v5
        with:
          context: ./web-rally
          file: ./web-rally/Dockerfile
          push: false
          tags: rally-web:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build web production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./web-rally/Dockerfile.prod
          push: false
          tags: rally-web:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test web container starts
        run: |
          docker run --rm -d --name rally-web-test -p 3003:3003 rally-web:dev
          
          sleep 5
          
          if docker ps | grep -q rally-web-test; then
            echo "✅ Web container started successfully"
            docker stop rally-web-test
          else
            echo "❌ Web container failed to start"
            docker logs rally-web-test || true
            exit 1
          fi

  docker-compose-validation:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate compose.override.yml
        run: |
          if [ -f compose.override.yml ]; then
            echo "Validating compose.override.yml..."
            docker-compose -f compose.override.yml config > /dev/null
            echo "✅ compose.override.yml is valid"
          else
            echo "⚠️  compose.override.yml not found"
          fi
      
      - name: Validate compose.override.prod.yml
        run: |
          if [ -f compose.override.prod.yml ]; then
            echo "Validating compose.override.prod.yml..."
            docker-compose -f compose.override.prod.yml config > /dev/null
            echo "✅ compose.override.prod.yml is valid"
          else
            echo "⚠️  compose.override.prod.yml not found"
          fi
      
      - name: Check service names match manifest
        run: |
          MANIFEST_NAME=$(jq -r '.name' manifest.json)
          echo "Extension name from manifest: $MANIFEST_NAME"
          
          # Check if compose file uses correct service naming
          if grep -q "api_${MANIFEST_NAME}" compose.override.yml && \
             grep -q "web_${MANIFEST_NAME}" compose.override.yml; then
            echo "✅ Service names match manifest"
          else
            echo "⚠️  Service names may not match manifest naming convention"
          fi

