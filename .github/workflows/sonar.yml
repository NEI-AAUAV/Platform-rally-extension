name: SonarQube Analysis
permissions:
  contents: read
  pull-requests: write

on:
  # Trigger after tests complete to reuse their artifacts
  workflow_run:
    workflows: ["Rally Extension Tests"]
    types: [completed]
    branches: [main]
  pull_request:
    branches: main
  workflow_dispatch:

jobs:
  # Run tests for PRs (tests.yml only runs on main push via workflow_run)
  run-tests-for-pr:
    name: Run Tests (PR only)
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/tests.yml
    secrets: inherit
  
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    # Wait for tests if running for PR
    needs: [run-tests-for-pr]
    if: always() && (github.event_name != 'pull_request' || needs.run-tests-for-pr.result == 'success')
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Download test artifacts from tests.yml
        uses: actions/download-artifact@v3
        if: github.event_name == 'workflow_run'
        continue-on-error: true
        with:
          name: api-test-results
          path: api-rally/
          
      - name: Download frontend test artifacts
        uses: actions/download-artifact@v3
        if: github.event_name == 'workflow_run'
        continue-on-error: true
        with:
          name: frontend-test-results
          path: web-rally/
      
      - name: Check if coverage exists
        id: check_coverage
        run: |
          if [ -f "api-rally/coverage.xml" ] || [ -f "api-rally/test-results.xml" ]; then
            echo "API coverage found from tests.yml"
            echo "has_api_coverage=true" >> $GITHUB_OUTPUT
          else
            echo "No API coverage found, will run tests"
            echo "has_api_coverage=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -d "web-rally/coverage" ]; then
            echo "Web coverage found from tests.yml"
            echo "has_web_coverage=true" >> $GITHUB_OUTPUT
          else
            echo "No web coverage found, will run tests"
            echo "has_web_coverage=false" >> $GITHUB_OUTPUT
          fi
      
      # Only install deps and run tests if coverage not found
      - name: Install Python dependencies (API)
        if: steps.check_coverage.outputs.has_api_coverage == 'false'
        run: |
          cd api-rally
          poetry install --no-root
          poetry run pip install pytest-cov
          poetry run pip install requests
          
      - name: Cache pnpm store (Web)
        if: steps.check_coverage.outputs.has_web_coverage == 'false'
        uses: actions/cache@v3
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('web-rally/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            
      - name: Install Node.js dependencies (Web)
        if: steps.check_coverage.outputs.has_web_coverage == 'false'
        run: |
          cd web-rally
          pnpm install --frozen-lockfile
          
      - name: Create test database
        if: steps.check_coverage.outputs.has_api_coverage == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres_test -c "CREATE DATABASE postgres_test_test;" || echo "Database might already exist"
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres_test
          
      - name: Run Python tests with coverage (API)
        if: steps.check_coverage.outputs.has_api_coverage == 'false'
        run: |
          cd api-rally
          poetry run pytest app/tests/ --cov=app --cov-report=xml --cov-report=html --cov-report=term --junitxml=test-results.xml
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres_test
        continue-on-error: true
        
      - name: Run TypeScript tests with coverage (Web)
        if: steps.check_coverage.outputs.has_web_coverage == 'false'
        run: |
          cd web-rally
          if grep -q '"test:coverage"' package.json; then
            npm run test:coverage || true
          elif grep -q '"test"' package.json; then
            npm run test -- --run --coverage || true
          else
            echo "No test script found, skipping tests"
          fi
        continue-on-error: true
      
      - name: Summary
        run: |
          echo "## Test Coverage Source" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_coverage.outputs.has_api_coverage }}" == "true" ]; then
            echo "âœ… API: Reused from tests.yml (saved ~2 min)" >> $GITHUB_STEP_SUMMARY
          else
            echo "ðŸ”„ API: Ran tests locally" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.check_coverage.outputs.has_web_coverage }}" == "true" ]; then
            echo "âœ… Web: Reused from tests.yml (saved ~1 min)" >> $GITHUB_STEP_SUMMARY
          else
            echo "ðŸ”„ Web: Ran tests locally" >> $GITHUB_STEP_SUMMARY
          fi
        
      - name: Create Custom Trust Store with SonarQube Certificate
        run: |
          echo "Creating custom trust store with SonarQube certificate..."
          
          # Download the certificate from your SonarQube server
          echo "Downloading certificate from nei.web.ua.pt:443..."
          echo | openssl s_client -servername nei.web.ua.pt -connect nei.web.ua.pt:443 2>/dev/null | openssl x509 -outform PEM > sonarqube.crt
          
          # Check if certificate was downloaded
          if [ -f sonarqube.crt ]; then
            echo "Certificate downloaded successfully"
            echo "Certificate content (first few lines):"
            head -5 sonarqube.crt
          else
            echo "ERROR: Failed to download certificate"
            exit 1
          fi
          
          # Create a custom trust store with the SonarQube certificate
          echo "Creating custom trust store..."
          keytool -genkeypair -alias dummy -keyalg RSA -keysize 2048 -storetype JKS -keystore custom-truststore.jks -storepass changeit -keypass changeit -dname "CN=dummy" -validity 1
          keytool -delete -alias dummy -keystore custom-truststore.jks -storepass changeit
          
          echo "Adding SonarQube certificate to trust store..."
          keytool -keystore custom-truststore.jks -storepass changeit -noprompt -trustcacerts -importcert -alias sonarqube-cert -file sonarqube.crt
          
          # Verify the certificate was added
          echo "Verifying certificate in trust store..."
          keytool -keystore custom-truststore.jks -storepass changeit -list | grep sonarqube-cert
          
          echo "Custom trust store created successfully"
        
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: SonarQube Scan (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: SonarSource/sonarqube-scan-action@v6
        with:
          args: >
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}
            -Djavax.net.ssl.trustStore=custom-truststore.jks
            -Djavax.net.ssl.trustStorePassword=changeit
            -Djavax.net.ssl.trustStoreType=JKS
            -Dsonar.ssl.verify=false
            -Dcom.sun.net.ssl.checkRevocation=false
            -Dtrust_all_cert=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_SCANNER_OPTS: -Djavax.net.ssl.trustStore=custom-truststore.jks -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=JKS -Dsonar.ssl.verify=false

      - name: SonarQube Scan (Branch)
        if: ${{ github.event_name != 'pull_request' }}
        uses: SonarSource/sonarqube-scan-action@v6
        with:
          args: >
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.scm.revision=${{ github.sha }}
            -Djavax.net.ssl.trustStore=custom-truststore.jks
            -Djavax.net.ssl.trustStorePassword=changeit
            -Djavax.net.ssl.trustStoreType=JKS
            -Dsonar.ssl.verify=false
            -Dcom.sun.net.ssl.checkRevocation=false
            -Dtrust_all_cert=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_SCANNER_OPTS: -Djavax.net.ssl.trustStore=custom-truststore.jks -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=JKS -Dsonar.ssl.verify=false
          
      - name: SonarQube Quality Gate Check
        run: |
          echo "Checking SonarQube Quality Gate status..."
          
          # Extract CE task ID from report-task.txt
          TASK_ID=$(grep "ceTaskId" .scannerwork/report-task.txt | cut -d'=' -f2)
          echo "Task ID: $TASK_ID"

          # Poll CE task until analysisId is available (max ~60s)
          ATTEMPTS=0
          ANALYSIS_ID=""
          while [ $ATTEMPTS -lt 30 ]; do
            echo "Polling CE task (attempt $ATTEMPTS)..."
            if CE_JSON=$(curl --silent --cacert sonarqube.crt -u "${{ secrets.SONAR_TOKEN }}:" \
                "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=$TASK_ID"); then
              ANALYSIS_ID=$(echo "$CE_JSON" | jq -r '.task.analysisId // empty')
              STATUS=$(echo "$CE_JSON" | jq -r '.task.status // empty')
              echo "CE status: $STATUS, analysisId: ${ANALYSIS_ID:-<none>}"
              if [ -n "$ANALYSIS_ID" ]; then
                break
              fi
            else
              echo "Failed to query CE task; retrying..."
            fi
            ATTEMPTS=$((ATTEMPTS+1))
            sleep 2
          done

          if [ -z "$ANALYSIS_ID" ]; then
            echo "Failed to obtain analysisId; skipping Quality Gate check."
            exit 0
          fi

          # Query Quality Gate using analysisId
          if curl --silent --cacert sonarqube.crt -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
            -o quality-gate-result.json; then
            echo "Connected using custom certificate"
          else
            echo "Custom certificate failed, using SSL bypass..."
            curl -k -u "${{ secrets.SONAR_TOKEN }}:" \
              "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
              -o quality-gate-result.json
          fi
          
          # Parse the result
          STATUS=$(cat quality-gate-result.json | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"
          
          if [ "$STATUS" = "OK" ]; then
            echo "Quality Gate PASSED"
            exit 0
          elif [ "$STATUS" = "ERROR" ]; then
            echo "Quality Gate FAILED"
            cat quality-gate-result.json | jq '.projectStatus.conditions[] | select(.status == "ERROR") | "\(.metricKey): \(.actualValue) (threshold: \(.errorThreshold))"'
            exit 1
          else
            echo "Quality Gate Status: $STATUS"
            exit 0
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}